/* ============================================================================
   @COMPONENTS -> BUTTON
   ========================================================================= */


/**
 * Main button component with a bunch of modifiers plus a 'Grouping' option.
 *
 * The base component class and all of its modifiers:
 *
   .button
     .button--secondary
     .button--tiny
     .button--small
     .button--large
     .button--huge
     .button--full-bleed
 *
 * The 'Grouping' option base class and all of its modifiers:
 *
   .button-group
     .button-group--vertical
 *
 * @markup
   <button class="button [modifier(s)]">Button text</button>
 *
 * 'Grouping' option:
 *
   <div class="button-group">
     <button class="button [modifier(s)]">Button text</button><!--
     --><button class="button [modifier(s)]">Button text</button><!--
     --><button class="button [modifier(s)]">Button text</button>
   </div>

   <div class="button-group button-group--vertical">
     <button class="button button--full-bleed [modifier(s)]">Button text</button><!--
     --><button class="button button--full-bleed [modifier(s)]">Button text</button><!--
     --><button class="button button--full-bleed [modifier(s)]">Button text</button>
   </div>
 *
 * @dependency
 * This component is dependent on the Button object therefore it is
 * `@extend`ed from this component.
 */


/**
 * Settings.
 */

/**
 * Toggle on/off certain styles and treatments.
 */

$c-button-apply-hover-styles:               true !default;

$c-button-apply-border:                     false !default;

$c-button-apply-rounded-corners:            true !default;

$c-button-apply-group-rounded-corners:      true !default;

/**
 * Box sizing, here we set a variable assuming that `box-sizing: border-box;`
 * is not set globally. If it has been previously been defined, the following
 * variable will be overriden and will be set to `true`.
 */

$apply-friendly-box-model:                  false !default;

/**
 * Colours.
 */

$c-button-background-colour:                $colour-primary !default;

$c-button-background-colour-secondary:      $colour-secondary !default;

$c-button-foreground-colour:                $colour-white !default;

$c-button-foreground-colour-secondary:      $c-button-foreground-colour !default;

/**
 * Padding.
 */

$c-button-padding-base:                     $spacing-base !default;

$c-button-padding-tiny:                     $spacing-third !default;

$c-button-padding-small:                    $spacing-half !default;

$c-button-padding-large:                    $spacing-base-plus-half !default;

$c-button-padding-huge:                     $spacing-double !default;

/**
 * Border.
 *
 * N.B. also includes the borders used in the 'Button Group' modifier
 */

$c-button-border-thickness:                 1 !default;

$c-button-border-style:                     solid !default;

$c-button-border-colour:                    darken($c-button-background-colour, 10%) !default;

$c-button-border-colour-secondary:          darken($c-button-background-colour-secondary, 10%) !default;

/**
 * Rounded corners.
 */

$c-button-rounded-corners-size:             $border-radius !default;

/**
 * Hover/focus styles, simple fade out effect via `opacity`
 */

$c-button-hover-opacity-strength:           0.7 !default;

$c-button-hover-transition-duration:        0.1 !default;

$c-button-hover-transition-timing-function: linear !default;


.button {
  // `@extend`ing the Button object
  @extend %o-button;
  text-align: center;
  background-color: $c-button-background-colour;
  @include to-rem(padding, $c-button-padding-base / 2 $c-button-padding-base);

  // Apply a border
  @if $c-button-apply-border {
    @include to-rem(border, $c-button-border-thickness $c-button-border-style
      $c-button-border-colour);
  }// endif

  // Apply rounded corners
  @if $c-button-apply-rounded-corners {
    // N.B. ugly hack in order to increase the specificty to override the
    // removal of rounded corners that iOS applies set in Core -> Base ->
    // Forms
    html & {@include to-rem(border-radius, $c-button-rounded-corners-size);}
  }// endif

  // Foreground colour
  &,
  &:hover,
  &:focus,
  &:active {color: $c-button-foreground-colour;}

  // Apply hover/focus styles
  @if $c-button-apply-hover-styles {
    &:hover,
    &:focus {
      opacity: $c-button-hover-opacity-strength;
      transition: opacity #{$c-button-hover-transition-duration}s
      $c-button-hover-transition-timing-function;
    }
  }// endif
}


/**
 * Modifier: secondary colour.
 */

.button--secondary {
  background-color: $c-button-background-colour-secondary;

  // Apply a border
  @if $c-button-apply-border {
    @include to-rem(border-color, $c-button-border-colour-secondary);
  }// endif

  // Foreground colour
  &,
  &:hover,
  &:focus,
  &:active {color: $c-button-foreground-colour-secondary;}
}


/**
 * Modifier: tiny padding.
 */

.button--tiny {@include to-rem(padding, $c-button-padding-tiny
 / 2 $c-button-padding-tiny);}


/**
 * Modifier: small padding.
 */

.button--small {@include to-rem(padding, $c-button-padding-small
 / 2 $c-button-padding-small);}


/**
 * Modifier: large padding.
 */

.button--large {@include to-rem(padding, $c-button-padding-large
 / 2 $c-button-padding-large);}


/**
 * Modifier: huge padding.
 */

.button--huge {@include to-rem(padding, $c-button-padding-huge
 / 2 $c-button-padding-huge);}


/**
 * Modifier: full bleed.
 */

.button--full-bleed {
  display: block;
  width: 100%;

  @if $apply-friendly-box-model == false {
    /**
     * Remove paddings so that widths and paddings don't conflict.
     *
     * N.B. if you're applying a border then that will conflict with the width
     * however Scally can't turn off your border in this case.
     */

    padding-right: 0;
    padding-left: 0;
  }// endif
}


/**
 * Button group.
 *
 * When you want to group a bunch of buttons side-by-side flush
 * to each other i.e. with no gap between the buttons. To differentiate
 * between the buttons a border is added, if borders haven't already been
 * applied that is i.e. `$c-button-border == true`.
 *
 * N.B. grouping buttons requires that you remove the whitespace between the
 * buttons so they're flush to each other, one way to do this is by inserting
 * HTML comments between the buttons.
 *
 * @markup
   <div class="button-group [modifier]">
     <button class="button">Left</button><!--
      --><button class="button">Middle</button><!--
      --><button class="button">Right</button>
   </div>
 */


.button-group {

  .button {

    @if $c-button-apply-border == false {
      @include to-rem(border, $c-button-border-thickness $c-button-border-style
        $c-button-border-colour);
    }

    // Turn off right borders so they don't double up, except for the last
    // one
    &:not(:last-child) {border-right: 0;}

    // Turn off rounded corners if rounded corners are on by default as only
    // the first and last buttons in the group need rounded corners
    @if $c-button-apply-rounded-corners {
      border-radius: 0;
    }

    // Round off the first and last buttons in the group
    @if $c-button-apply-group-rounded-corners or $c-button-apply-rounded-corners {
      &:first-child {@include to-rem(border-top-left-radius
        border-bottom-left-radius, $c-button-rounded-corners-size);}

      &:last-child {@include to-rem(border-top-right-radius
        border-bottom-right-radius, $c-button-rounded-corners-size);}
    }

  }


  /**
   * Modifier: vertically stacked button group.
   *
   * N.B. buttons within the vertically stacked version need to use the
   * `button--full-bleed` modifier.
   */

  &.button-group--vertical {
    // This will shrink wrap the container to be as wide as the widest button
    display: inline-block;

    .button {

      // Turn back on the right border that gets turned off by default
      @include to-rem(border-right, $c-button-border-thickness
        $c-button-border-style $c-button-border-colour);

      // Turn off bottom borders so they don't double up, except for the last
      // one
      &:not(:last-child) {border-bottom: 0;}

      // Round off the first and last buttons in the group
      @if $c-button-apply-group-rounded-corners or $c-button-apply-rounded-corners {
        &:first-child {
          border-bottom-left-radius: 0;
          @include to-rem(border-top-left-radius border-top-right-radius,
            $c-button-rounded-corners-size);
        }

        &:last-child {
          border-top-right-radius: 0;
          @include to-rem(border-bottom-left-radius
            border-bottom-right-radius, $c-button-rounded-corners-size);
        }
      }
    }
  }
}